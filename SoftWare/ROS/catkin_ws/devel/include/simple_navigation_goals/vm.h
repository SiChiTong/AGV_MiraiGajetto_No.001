// Generated by gencpp from file simple_navigation_goals/vm.msg
// DO NOT EDIT!


#ifndef SIMPLE_NAVIGATION_GOALS_MESSAGE_VM_H
#define SIMPLE_NAVIGATION_GOALS_MESSAGE_VM_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace simple_navigation_goals
{
template <class ContainerAllocator>
struct vm_
{
  typedef vm_<ContainerAllocator> Type;

  vm_()
    : vx(0.0)
    , vy(0.0)
    , w(0.0)  {
    }
  vm_(const ContainerAllocator& _alloc)
    : vx(0.0)
    , vy(0.0)
    , w(0.0)  {
  (void)_alloc;
    }



   typedef float _vx_type;
  _vx_type vx;

   typedef float _vy_type;
  _vy_type vy;

   typedef float _w_type;
  _w_type w;





  typedef boost::shared_ptr< ::simple_navigation_goals::vm_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::simple_navigation_goals::vm_<ContainerAllocator> const> ConstPtr;

}; // struct vm_

typedef ::simple_navigation_goals::vm_<std::allocator<void> > vm;

typedef boost::shared_ptr< ::simple_navigation_goals::vm > vmPtr;
typedef boost::shared_ptr< ::simple_navigation_goals::vm const> vmConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::simple_navigation_goals::vm_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::simple_navigation_goals::vm_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace simple_navigation_goals

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'simple_navigation_goals': ['/home/kmakise/catkin_ws/src/simple_navigation_goals/msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::simple_navigation_goals::vm_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::simple_navigation_goals::vm_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::simple_navigation_goals::vm_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::simple_navigation_goals::vm_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::simple_navigation_goals::vm_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::simple_navigation_goals::vm_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::simple_navigation_goals::vm_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f3691ef5f5de1a108d3f9cc106129c39";
  }

  static const char* value(const ::simple_navigation_goals::vm_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf3691ef5f5de1a10ULL;
  static const uint64_t static_value2 = 0x8d3f9cc106129c39ULL;
};

template<class ContainerAllocator>
struct DataType< ::simple_navigation_goals::vm_<ContainerAllocator> >
{
  static const char* value()
  {
    return "simple_navigation_goals/vm";
  }

  static const char* value(const ::simple_navigation_goals::vm_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::simple_navigation_goals::vm_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 vx\n\
float32 vy\n\
float32 w\n\
";
  }

  static const char* value(const ::simple_navigation_goals::vm_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::simple_navigation_goals::vm_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.vx);
      stream.next(m.vy);
      stream.next(m.w);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct vm_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::simple_navigation_goals::vm_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::simple_navigation_goals::vm_<ContainerAllocator>& v)
  {
    s << indent << "vx: ";
    Printer<float>::stream(s, indent + "  ", v.vx);
    s << indent << "vy: ";
    Printer<float>::stream(s, indent + "  ", v.vy);
    s << indent << "w: ";
    Printer<float>::stream(s, indent + "  ", v.w);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SIMPLE_NAVIGATION_GOALS_MESSAGE_VM_H
